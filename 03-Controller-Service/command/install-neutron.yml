---
- name: "Controller : Neutron 설치 ~~~~~~~~~~~~~~!!!"
  hosts: remotes
  become: yes
  any_errors_fatal: true

  vars:
    db_name: neutron    
    region_name: RegionOne
    path_config: "/etc/neutron/neutron.conf"    

  tasks:
    # DB
    - name: Create database using direct SQL command
      shell: |        
        mysql -e "CREATE DATABASE neutron;"        
      # ignore_errors: yes
      when: hostname == 'controller'

    - name: Grant privileges to '{{ db_name }}' user on localhost
      shell: |
        mysql -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '{{ STACK_PASSWD }}';"        
      # ignore_errors: yes
      when: hostname == 'controller'

    - name: Grant privileges to '{{ db_name }}' user from any host
      shell: |        
        mysql -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '{{ STACK_PASSWD }}';"        
      # ignore_errors: yes
      when: hostname == 'controller'
    
    - name: Flush privileges
      shell: mysql -e "FLUSH PRIVILEGES;"
      # ignore_errors: yes
      when: hostname == 'controller'


    
    # Glance CREATE SERVICE
    - name: Create {{ db_name }} user in OpenStack
      shell: |
        . /root/admin-openrc
        openstack user create --domain default --password {{ STACK_PASSWD }} neutron
      args:
        executable: /bin/bash
      when: hostname == 'controller'
      register: user_creation

    - debug:
        msg:  "{{ user_creation.stdout_lines }}"
      when: hostname == 'controller'  

    - name: Add admin role to {{ db_name }} user
      shell: |
        . /root/admin-openrc
        openstack role add --project service --user neutron admin
      args:
        executable: /bin/bash
      when: hostname == 'controller'

    - name: Create {{ db_name }} service in OpenStack
      shell: |
        . /root/admin-openrc
        openstack service create --name neutron --description "OpenStack Networking" network
      args:
        executable: /bin/bash
      when: hostname == 'controller'



    # Glance - Create the Image service API endpoints
    - name: Create {{ db_name }} service public API endpoint
      shell: |
        . /root/admin-openrc
        openstack endpoint create --region {{ region_name }} network public http://{{ hostname }}:9696
      args:
        executable: /bin/bash
      when: hostname == 'controller'

    - name: Create {{ db_name }} service internal API endpoint
      shell: |
        . /root/admin-openrc
        openstack endpoint create --region {{ region_name }} network internal http://{{ hostname }}:9696
      args:
        executable: /bin/bash
      when: hostname == 'controller'

    - name: Create {{ db_name }} service admin API endpoint
      shell: |
        . /root/admin-openrc
        openstack endpoint create --region {{ region_name }} network admin http://{{ hostname }}:9696
      args:
        executable: /bin/bash
      when: hostname == 'controller'



    # Service Install  
    - name: Install Neutron server and agents
      ansible.builtin.apt:
        name:
          - neutron-server
          - neutron-plugin-ml2
          - neutron-linuxbridge-agent
          - neutron-l3-agent
          - neutron-dhcp-agent
          - neutron-metadata-agent
        state: present
        update_cache: yes
        cache_valid_time: 3600
      when: hostname == 'controller'




      # Configure the server component
    - name: Configure neutron.conf api_database connection
      ini_file:
        path: "{{ path_config }}"
        section: database
        option: connection
        value: "mysql+pymysql://neutron:{{ STACK_PASSWD }}@{{ hostname }}/neutron"
        mode: 0644
      when: hostname == 'controller'


    - name: Set keystone_authtoken and other configurations in {{ path_config }}
      ini_file:
        path: "{{ path_config }}"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'DEFAULT', option: 'core_plugin', value: "ml2" }
        - { section: 'DEFAULT', option: 'service_plugins', value: "router" }       
        - { section: 'DEFAULT', option: 'allow_overlapping_ips', value: "true" }
        - { section: 'DEFAULT', option: 'transport_url', value: "rabbit://openstack:{{STACK_PASSWD}}@{{hostname}}" }
        - { section: 'DEFAULT', option: 'auth_strategy', value: "keystone" }
        - { section: 'DEFAULT', option: 'notify_nova_on_port_status_changes', value: "true" }
        - { section: 'DEFAULT', option: 'notify_nova_on_port_data_changes', value: "true" }
        - { section: 'keystone_authtoken', option: 'www_authenticate_uri', value: "http://{{ hostname }}:5000" }
        - { section: 'keystone_authtoken', option: 'auth_url', value: "http://{{ hostname }}:5000" }
        - { section: 'keystone_authtoken', option: 'memcached_servers', value: "{{ hostname }}:11211" }
        - { section: 'keystone_authtoken', option: 'auth_type', value: "password" }
        - { section: 'keystone_authtoken', option: 'project_domain_name', value: "default" }
        - { section: 'keystone_authtoken', option: 'user_domain_name', value: "default" }
        - { section: 'keystone_authtoken', option: 'project_name', value: "service" }
        - { section: 'keystone_authtoken', option: 'username', value: "neutron" }
        - { section: 'keystone_authtoken', option: 'password', value: "{{ STACK_PASSWD }}" }
        - { section: 'nova', option: 'auth_url', value: "http://{{hostname}}:5000" }
        - { section: 'nova', option: 'auth_type', value: "password" }
        - { section: 'nova', option: 'project_domain_name', value: "default" }
        - { section: 'nova', option: 'user_domain_name', value: "default" }
        - { section: 'nova', option: 'region_name', value: "{{ region_name }}" }
        - { section: 'nova', option: 'project_name', value: "service" }
        - { section: 'nova', option: 'username', value: "nova" }
        - { section: 'nova', option: 'password', value: "{{ STACK_PASSWD }}" }
        - { section: 'oslo_concurrency', option: 'lock_path', value: "/var/lib/neutron/tmp" }
      when: hostname == 'controller'


    - name: Configure the Modular Layer 2 (ML2) plug-in
      ini_file:
        path: "/etc/neutron/plugins/ml2/ml2_conf.ini"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'ml2', option: 'type_drivers', value: "flat,vlan,vxlan" }
        - { section: 'ml2', option: 'tenant_network_types', value: "vxlan" }
        - { section: 'ml2', option: 'mechanism_drivers', value: "linuxbridge,l2population" }
        - { section: 'ml2', option: 'extension_drivers', value: "port_security" }
        - { section: 'ml2_type_flat', option: 'flat_networks', value: "provider" }
        - { section: 'ml2_type_vxlan', option: 'vni_ranges', value: "1:1000" }
        - { section: 'securitygroup', option: 'enable_ipset', value: "true" }        
      when: hostname == 'controller'

    - name: Configure the Modular Layer 2 (ML2) - linuxbridge_agent
      ini_file:
        path: "/etc/neutron/plugins/ml2/linuxbridge_agent.ini"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'linux_bridge', option: 'physical_interface_mappings', value: "provider:{{ INTERFACE_NAME }}" }
        - { section: 'vxlan', option: 'enable_vxlan', value: "true" }
        - { section: 'vxlan', option: 'local_ip', value: "{{ inventory_hostname }}" }
        - { section: 'vxlan', option: 'l2_population', value: "true" }
        - { section: 'securitygroup', option: 'enable_security_group', value: "true" }
        - { section: 'securitygroup', option: 'firewall_driver', value: "neutron.agent.linux.iptables_firewall.IptablesFirewallDriver" }                                                                         
      when: hostname == 'controller'

    - name: Configure sysctl for net.bridge.bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        state: present
        reload: yes
      when: hostname == 'controller'

    - name: Configure sysctl for net.bridge.bridge-nf-call-ip6tables
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: '1'
        state: present
        reload: yes
      when: hostname == 'controller'



    # Configure the layer-3 agent
    - name: Configure the layer-3 agent interface driver
      ini_file:
        path: /etc/neutron/l3_agent.ini
        section: DEFAULT
        option: interface_driver
        value: "linuxbridge"
        mode: 0644
      when: hostname == 'controller'

    # DHCP agent config
    - name: Configure the DHCP Agent
      ini_file:
        path: "/etc/neutron/dhcp_agent.ini"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'DEFAULT', option: 'interface_driver', value: "linuxbridge" }
        - { section: 'DEFAULT', option: 'dhcp_driver', value: "neutron.agent.linux.dhcp.Dnsmasq" }
        - { section: 'DEFAULT', option: 'enable_isolated_metadata', value: "true" }
      when: hostname == 'controller'

    # Configure the metadata agent
    - name: Configure the DHCP Agent
      ini_file:
        path: "/etc/neutron/metadata_agent.ini"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'DEFAULT', option: 'nova_metadata_host', value: "{{ hostname }}" }
        - { section: 'DEFAULT', option: 'metadata_proxy_shared_secret', value: "{{ STACK_PASSWD }}" }
      when: hostname == 'controller'

    # Configure the /etc/nova/nova.conf
    - name: Configure the /etc/nova/nova.conf
      ini_file:
        path: "/etc/nova/nova.conf"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: 0644
      loop:
        - { section: 'neutron', option: 'auth_url', value: "http://{{ hostname }}:5000" }
        - { section: 'neutron', option: 'auth_type', value: "password" }
        - { section: 'neutron', option: 'project_domain_name', value: "default" }
        - { section: 'neutron', option: 'user_domain_name', value: "default" }
        - { section: 'neutron', option: 'region_name', value: "{{region_name}}" }
        - { section: 'neutron', option: 'project_name', value: "service" }
        - { section: 'neutron', option: 'username', value: "neutron" }
        - { section: 'neutron', option: 'password', value: "{{STACK_PASSWD}}" }
        - { section: 'neutron', option: 'service_metadata_proxy', value: "true" }
        - { section: 'neutron', option: 'metadata_proxy_shared_secret', value: "{{STACK_PASSWD}}" }
      when: hostname == 'controller'





    - name: Upgrade Neutron database
      ansible.builtin.command:
        cmd: su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
      when: hostname == 'controller'
    


    - name: Restart nova-api service
      service:
        name: nova-api
        state: restarted
      when: hostname == 'controller'

    - name: Restart neutron-server service
      service:
        name: neutron-server
        state: restarted
      when: hostname == 'controller'

    - name: Restart neutron-linuxbridge-agent service
      service:
        name: neutron-linuxbridge-agent
        state: restarted
      when: hostname == 'controller'

    - name: Restart neutron-dhcp-agent service
      service:
        name: neutron-dhcp-agent
        state: restarted
      when: hostname == 'controller'

    - name: Restart neutron-metadata-agent service
      service:
        name: neutron-metadata-agent
        state: restarted
      when: hostname == 'controller'

    - name: Restart neutron-l3-agent service
      service:
        name: neutron-l3-agent
        state: restarted
      when: hostname == 'controller'